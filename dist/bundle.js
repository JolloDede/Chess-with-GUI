/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/click.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/AI.ts":
/*!*******************!*\
  !*** ./src/AI.ts ***!
  \*******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar MyNode = /** @class */ (function () {\r\n    function MyNode() {\r\n        this.value = 0;\r\n        this.childNodes = [];\r\n        this.parentNode = null;\r\n    }\r\n    MyNode.prototype.addSubNode = function (value) {\r\n        this.childNodes.push(value);\r\n    };\r\n    MyNode.prototype.setParentNode = function (value) {\r\n        this.parentNode = value;\r\n    };\r\n    return MyNode;\r\n}());\r\nvar AI = /** @class */ (function () {\r\n    function AI(board, whitePieces) {\r\n        this.board = board;\r\n        this.pieces = [];\r\n        if (whitePieces) {\r\n            this.pieces = board.whitePieces;\r\n        }\r\n        else {\r\n            this.pieces = board.blackPieces;\r\n        }\r\n    }\r\n    AI.prototype.makeMove = function (from, to) {\r\n        var piece;\r\n        piece = this.board.getPieceAt(from.x, from.y);\r\n        piece.move(to.x, to.y, this.board);\r\n    };\r\n    return AI;\r\n}());\r\nexports.AI = AI;\r\nvar RandomAI = /** @class */ (function (_super) {\r\n    __extends(RandomAI, _super);\r\n    function RandomAI(board, whitePieces) {\r\n        return _super.call(this, board, whitePieces) || this;\r\n    }\r\n    RandomAI.prototype.decideMove = function () {\r\n        var moves;\r\n        var pieceNum;\r\n        var moveNum;\r\n        while (true) {\r\n            pieceNum = Math.floor(Math.random() * this.pieces.length);\r\n            if (!this.pieces[pieceNum].taken) {\r\n                moves = this.pieces[pieceNum].generateMoves(this.board);\r\n                if (moves.length != 0) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        moveNum = Math.floor(Math.random() * moves.length);\r\n        return { from: this.pieces[pieceNum].matrixPosition, to: moves[moveNum] };\r\n    };\r\n    return RandomAI;\r\n}(AI));\r\nexports.RandomAI = RandomAI;\r\nfunction reverseArray(array) {\r\n    return array.slice().reverse();\r\n}\r\nvar pawnEvalWhite = [\r\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0],\r\n    [1.0, 1.0, 2.0, 3.0, 3.0, 2.0, 1.0, 1.0],\r\n    [0.5, 0.5, 1.0, 2.5, 2.5, 1.0, 0.5, 0.5],\r\n    [0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0],\r\n    [0.5, -0.5, -1.0, 0.0, 0.0, -1.0, -0.5, 0.5],\r\n    [0.5, 1.0, 1.0, -2.0, -2.0, 1.0, 1.0, 0.5],\r\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\r\n];\r\nvar pawnEvalBlack = reverseArray(pawnEvalWhite);\r\nvar knightEval = [\r\n    [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0],\r\n    [-4.0, -2.0, 0.0, 0.0, 0.0, 0.0, -2.0, -4.0],\r\n    [-3.0, 0.0, 1.0, 1.5, 1.5, 1.0, 0.0, -3.0],\r\n    [-3.0, 0.5, 1.5, 2.0, 2.0, 1.5, 0.5, -3.0],\r\n    [-3.0, 0.0, 1.5, 2.0, 2.0, 1.5, 0.0, -3.0],\r\n    [-3.0, 0.5, 1.0, 1.5, 1.5, 1.0, 0.5, -3.0],\r\n    [-4.0, -2.0, 0.0, 0.5, 0.5, 0.0, -2.0, -4.0],\r\n    [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0]\r\n];\r\nvar bishopEvalWhite = [\r\n    [-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0],\r\n    [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0],\r\n    [-1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 0.0, -1.0],\r\n    [-1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, -1.0],\r\n    [-1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, -1.0],\r\n    [-1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0],\r\n    [-1.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, -1.0],\r\n    [-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0]\r\n];\r\nvar bishopEvalBlack = reverseArray(bishopEvalWhite);\r\nvar rookEvalWhite = [\r\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5],\r\n    [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],\r\n    [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],\r\n    [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],\r\n    [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],\r\n    [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],\r\n    [0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0]\r\n];\r\nvar rookEvalBlack = reverseArray(rookEvalWhite);\r\nvar evalQueen = [\r\n    [-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0],\r\n    [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0],\r\n    [-1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0],\r\n    [-0.5, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5],\r\n    [0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5],\r\n    [-1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0],\r\n    [-1.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, -1.0],\r\n    [-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0]\r\n];\r\nvar kingEvalWhite = [\r\n    [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\r\n    [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\r\n    [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\r\n    [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\r\n    [-2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0],\r\n    [-1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0],\r\n    [2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0],\r\n    [2.0, 3.0, 1.0, 0.0, 0.0, 1.0, 3.0, 2.0]\r\n];\r\nvar kingEvalBlack = reverseArray(kingEvalWhite);\r\nfunction getPieceAbsoluteValue(piece) {\r\n    switch (piece.letter) {\r\n        case \"P\":\r\n            return 10 + (piece.white ? pawnEvalWhite[piece.matrixPosition.y][piece.matrixPosition.x] : pawnEvalBlack[piece.matrixPosition.y][piece.matrixPosition.x]);\r\n        case \"N\":\r\n            return 30 + knightEval[piece.matrixPosition.y][piece.matrixPosition.x];\r\n        case \"B\":\r\n            return 30 + (piece.white ? bishopEvalWhite[piece.matrixPosition.y][piece.matrixPosition.x] : bishopEvalBlack[piece.matrixPosition.y][piece.matrixPosition.x]);\r\n        case \"R\":\r\n            return 50 + (piece.white ? rookEvalWhite[piece.matrixPosition.y][piece.matrixPosition.x] : rookEvalBlack[piece.matrixPosition.y][piece.matrixPosition.x]);\r\n        case \"Q\":\r\n            return 90 + evalQueen[piece.matrixPosition.y][piece.matrixPosition.x];\r\n        case \"K\":\r\n            return 900 + (piece.white ? kingEvalWhite[piece.matrixPosition.y][piece.matrixPosition.x] : kingEvalBlack[piece.matrixPosition.y][piece.matrixPosition.x]);\r\n        default:\r\n            console.log(\"Error getPieceAbsoluteValue\");\r\n            return 0;\r\n    }\r\n}\r\nvar maxDepth = 4;\r\nvar MinimaxAI = /** @class */ (function (_super) {\r\n    __extends(MinimaxAI, _super);\r\n    function MinimaxAI(board, whitePieces) {\r\n        var _this = _super.call(this, board, whitePieces) || this;\r\n        _this.Nodes = [];\r\n        _this.nodeIndexStack = [];\r\n        _this.firstMoves = [];\r\n        _this.boardStack = [];\r\n        return _this;\r\n    }\r\n    MinimaxAI.prototype.getBoardAbsoluteValue = function (allyPieces, enemyPieces) {\r\n        var value = 0;\r\n        for (var i = 0; i < allyPieces.length; i++) {\r\n            if (allyPieces[i].taken) {\r\n                value -= allyPieces[i].value;\r\n            }\r\n            else {\r\n                value += getPieceAbsoluteValue(allyPieces[i]);\r\n            }\r\n        }\r\n        for (var i = 0; i < enemyPieces.length; i++) {\r\n            if (enemyPieces[i].taken) {\r\n                value += enemyPieces[i].value;\r\n            }\r\n            else {\r\n                value -= getPieceAbsoluteValue(enemyPieces[i]);\r\n            }\r\n        }\r\n        return value;\r\n    };\r\n    MinimaxAI.prototype.createNewBoardsWithMovesRecursiv = function (board, depth) {\r\n        var moves = [];\r\n        var pieces;\r\n        if (depth == maxDepth) {\r\n            return;\r\n        }\r\n        if (depth % 2 == 0) {\r\n            pieces = board.blackPieces;\r\n        }\r\n        else {\r\n            pieces = board.whitePieces;\r\n        }\r\n        for (var i = 0; i < pieces.length; i++) {\r\n            moves = pieces[i].generateMoves(board);\r\n            for (var j = 0; j < moves.length; j++) {\r\n                this.boardStack.push(board.clone());\r\n                if (depth == 0) {\r\n                    this.firstMoves.push({ move: { from: pieces[i].matrixPosition, to: moves[j] }, nodeNr: this.Nodes.length });\r\n                }\r\n                this.boardStack[this.boardStack.length - 1].movePiece(pieces[i].matrixPosition, moves[j]);\r\n                this.Nodes.push(new MyNode());\r\n                if (depth == maxDepth - 1) {\r\n                    this.Nodes[this.Nodes.length - 1].value = this.getBoardAbsoluteValue(this.boardStack[this.boardStack.length - 1].blackPieces, this.boardStack[this.boardStack.length - 1].whitePieces);\r\n                    // console.log(this.Nodes.length+\" \"+this.Nodes[this.Nodes.length-1].value);\r\n                }\r\n                this.Nodes[this.nodeIndexStack[this.nodeIndexStack.length - 1]].addSubNode(this.Nodes[this.Nodes.length - 1]);\r\n                this.Nodes[this.Nodes.length - 1].setParentNode(this.Nodes[this.nodeIndexStack[this.nodeIndexStack.length - 1]]);\r\n                this.nodeIndexStack.push(this.Nodes.length - 1);\r\n                this.createNewBoardsWithMovesRecursiv(this.boardStack[this.boardStack.length - 1], depth + 1);\r\n                this.nodeIndexStack.pop();\r\n                this.boardStack.pop();\r\n            }\r\n        }\r\n    };\r\n    MinimaxAI.prototype.vergleichen = function (board) {\r\n        var error = 0;\r\n        for (var i = 0; i < 8; i++) {\r\n            if ((this.board.whitePieces[i].matrixPosition.x != board.whitePieces[i].matrixPosition.x)\r\n                || (this.board.whitePieces[i].matrixPosition.y != board.whitePieces[i].matrixPosition.y)) {\r\n                error++;\r\n            }\r\n            if ((this.board.blackPieces[i].matrixPosition.x != board.blackPieces[i].matrixPosition.x)\r\n                || (this.board.blackPieces[i].matrixPosition.y != board.blackPieces[i].matrixPosition.y)) {\r\n                error++;\r\n            }\r\n        }\r\n        console.log(\"Error board vergleich: \" + error);\r\n    };\r\n    MinimaxAI.prototype.minimax = function (position, depth, maximizingPlayer) {\r\n        var value;\r\n        if (depth == 0) {\r\n            return position.value;\r\n        }\r\n        if (maximizingPlayer) {\r\n            value = -Infinity;\r\n            for (var i = 0; i < position.childNodes.length; i++) {\r\n                value = Math.max(value, this.minimax(position.childNodes[i], depth - 1, false));\r\n            }\r\n            position.value = value;\r\n            return value;\r\n        }\r\n        else if (!maximizingPlayer) {\r\n            value = Infinity;\r\n            for (var i = 0; i < position.childNodes.length; i++) {\r\n                value = Math.min(value, this.minimax(position.childNodes[i], depth - 1, true));\r\n            }\r\n            position.value = value;\r\n            return value;\r\n        }\r\n        console.log(\"Error Minimax\");\r\n        return 0;\r\n    };\r\n    MinimaxAI.prototype.getChildNodeIndexWithValue = function (node) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            if (node.childNodes[i].value == node.value) {\r\n                return this.Nodes.indexOf(node.childNodes[i]);\r\n            }\r\n        }\r\n        console.log(\"Error getChildNodeIndexWithValue\");\r\n        return 0;\r\n    };\r\n    MinimaxAI.prototype.decideMove = function () {\r\n        this.Nodes = [];\r\n        var bestMoveIndex;\r\n        this.firstMoves = [];\r\n        this.Nodes.push(new MyNode());\r\n        this.nodeIndexStack.push(this.Nodes.length - 1);\r\n        this.createNewBoardsWithMovesRecursiv(this.board.clone(), 0);\r\n        console.log(this.minimax(this.Nodes[0], maxDepth, true), this.Nodes[0].value);\r\n        bestMoveIndex = this.getChildNodeIndexWithValue(this.Nodes[0]);\r\n        return this.getMove(bestMoveIndex);\r\n    };\r\n    MinimaxAI.prototype.getMove = function (bMI) {\r\n        for (var i = 0; i < this.firstMoves.length; i++) {\r\n            if (this.firstMoves[i].nodeNr == bMI) {\r\n                return this.firstMoves[i].move;\r\n            }\r\n        }\r\n        console.log(\"Error getMove\");\r\n        return {};\r\n    };\r\n    MinimaxAI.prototype.boardComparePosOff = function (destBoard) {\r\n        for (var i = 0; i < 16; i++) {\r\n            if (this.pieces[0].white) {\r\n                if (this.pieces[i].matrixPosition.x != destBoard.whitePieces[i].matrixPosition.x || this.pieces[i].matrixPosition.y != destBoard.whitePieces[i].matrixPosition.y) {\r\n                    return { from: this.pieces[i].matrixPosition, to: destBoard.whitePieces[i].matrixPosition };\r\n                }\r\n            }\r\n            else {\r\n                if (this.pieces[i].matrixPosition.x != destBoard.blackPieces[i].matrixPosition.x || this.pieces[i].matrixPosition.y != destBoard.blackPieces[i].matrixPosition.y) {\r\n                    return { from: this.pieces[i].matrixPosition, to: destBoard.blackPieces[i].matrixPosition };\r\n                }\r\n            }\r\n        }\r\n        console.log(\"Error Compare Pos of Boards\");\r\n        return {};\r\n    };\r\n    return MinimaxAI;\r\n}(AI));\r\nexports.MinimaxAI = MinimaxAI;\r\n\n\n//# sourceURL=webpack:///./src/AI.ts?");

/***/ }),

/***/ "./src/board.ts":
/*!**********************!*\
  !*** ./src/board.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar piece_1 = __webpack_require__(/*! ./piece */ \"./src/piece.ts\");\r\nvar Board = /** @class */ (function () {\r\n    function Board() {\r\n        this.scoreWhite = 0;\r\n        this.scoreBlack = 0;\r\n        this.whitePieces = [];\r\n        this.blackPieces = [];\r\n        this.whiteKingUnderAttack = false;\r\n        this.blackKingUnderAttack = false;\r\n        this.setupPieces();\r\n    }\r\n    Board.prototype.setupPieces = function () {\r\n        this.whitePieces.push(new piece_1.King(4, 7, true));\r\n        this.whitePieces.push(new piece_1.Rook(0, 7, true));\r\n        this.whitePieces.push(new piece_1.Rook(7, 7, true));\r\n        this.whitePieces.push(new piece_1.Knigth(1, 7, true));\r\n        this.whitePieces.push(new piece_1.Knigth(6, 7, true));\r\n        this.whitePieces.push(new piece_1.Bishop(2, 7, true));\r\n        this.whitePieces.push(new piece_1.Bishop(5, 7, true));\r\n        this.whitePieces.push(new piece_1.Queen(3, 7, true));\r\n        for (var i = 0; i < 8; i++) {\r\n            this.whitePieces.push(new piece_1.Pawn(i, 6, true));\r\n        }\r\n        this.blackPieces.push(new piece_1.King(4, 0, false));\r\n        this.blackPieces.push(new piece_1.Rook(0, 0, false));\r\n        this.blackPieces.push(new piece_1.Rook(7, 0, false));\r\n        this.blackPieces.push(new piece_1.Knigth(1, 0, false));\r\n        this.blackPieces.push(new piece_1.Knigth(6, 0, false));\r\n        this.blackPieces.push(new piece_1.Bishop(2, 0, false));\r\n        this.blackPieces.push(new piece_1.Bishop(5, 0, false));\r\n        this.blackPieces.push(new piece_1.Queen(3, 0, false));\r\n        for (var i = 0; i < 8; i++) {\r\n            this.blackPieces.push(new piece_1.Pawn(i, 1, false));\r\n        }\r\n    };\r\n    // pieceAt(x: number, y: number): boolean {\r\n    //     for (var i = 0; i < this.whitePieces.length; i++) {\r\n    //         if (this.whitePieces[i].matrixPosition.x == x && this.whitePieces[i].matrixPosition.y == y) {\r\n    //             if (!this.whitePieces[i].taken) {\r\n    //                 return true;\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     for (var i = 0; i < this.blackPieces.length; i++) {\r\n    //         if (this.blackPieces[i].matrixPosition.x == x && this.blackPieces[i].matrixPosition.y == y) {\r\n    //             if (!this.blackPieces[i].taken) {\r\n    //                 return true;\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     return false;\r\n    // }\r\n    Board.prototype.getPieceAt = function (x, y) {\r\n        for (var i = 0; i < this.whitePieces.length; i++) {\r\n            if (!this.whitePieces[i].taken && this.whitePieces[i].matrixPosition.x == x && this.whitePieces[i].matrixPosition.y == y) {\r\n                return this.whitePieces[i];\r\n            }\r\n        }\r\n        for (var i = 0; i < this.blackPieces.length; i++) {\r\n            if (!this.blackPieces[i].taken && this.blackPieces[i].matrixPosition.x == x && this.blackPieces[i].matrixPosition.y == y) {\r\n                return this.blackPieces[i];\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    Board.prototype.isDone = function () {\r\n        return this.whitePieces[0].taken || this.blackPieces[0].taken;\r\n    };\r\n    Board.prototype.setScore = function () {\r\n        this.scoreWhite = 0;\r\n        this.scoreBlack = 0;\r\n        for (var i = 0; i < this.whitePieces.length; i++) {\r\n            if (this.whitePieces[i].taken) {\r\n                this.scoreBlack += this.whitePieces[i].value;\r\n            }\r\n        }\r\n        for (var i = 0; i < this.blackPieces.length; i++) {\r\n            if (this.blackPieces[i].taken) {\r\n                this.scoreWhite += this.blackPieces[i].value;\r\n            }\r\n        }\r\n        this.showScore();\r\n    };\r\n    Board.prototype.showScore = function () {\r\n        document.getElementById(\"score-white\").innerText = String(this.scoreWhite);\r\n        document.getElementById(\"score-black\").innerText = String(this.scoreBlack);\r\n    };\r\n    Board.prototype.movePiece = function (from, to) {\r\n        var piece;\r\n        piece = this.getPieceAt(from.x, from.y);\r\n        if (piece == null) {\r\n            console.log(from.x + \" \" + from.y);\r\n            for (var i = 0; i < this.blackPieces.length; i++) {\r\n                console.log(this.blackPieces[i].matrixPosition.x + \" \" + this.blackPieces[i].matrixPosition.y);\r\n                this.getPieceAt(from.x, from.y);\r\n            }\r\n        }\r\n        else {\r\n            if (piece.canMove(to.x, to.y, this)) {\r\n                piece.move(to.x, to.y, this);\r\n            }\r\n        }\r\n    };\r\n    Board.prototype.clone = function () {\r\n        var clone = new Board();\r\n        var i;\r\n        for (i = 0; i < this.whitePieces.length; i++) {\r\n            clone.whitePieces[i].matrixPosition.x = this.whitePieces[i].matrixPosition.x;\r\n            clone.whitePieces[i].matrixPosition.y = this.whitePieces[i].matrixPosition.y;\r\n            clone.whitePieces[i].taken = this.whitePieces[i].taken;\r\n        }\r\n        for (i = 0; i < this.blackPieces.length; i++) {\r\n            clone.blackPieces[i].matrixPosition.x = this.blackPieces[i].matrixPosition.x;\r\n            clone.blackPieces[i].matrixPosition.y = this.blackPieces[i].matrixPosition.y;\r\n            clone.blackPieces[i].taken = this.blackPieces[i].taken;\r\n        }\r\n        return clone;\r\n    };\r\n    Board.prototype.adjustBoards = function (dest) {\r\n        for (var i = 0; i < this.blackPieces.length; i++) {\r\n            if ((this.blackPieces[i].matrixPosition.x != dest.blackPieces[i].matrixPosition.x) || (this.blackPieces[i].matrixPosition.y != dest.blackPieces[i].matrixPosition.y)) {\r\n                this.movePiece(this.blackPieces[i].matrixPosition, dest.blackPieces[i].matrixPosition);\r\n            }\r\n        }\r\n    };\r\n    Board.prototype.kingUnderAttack = function (king) {\r\n        var pieces;\r\n        var moves;\r\n        var colorWhite = king.white;\r\n        if (colorWhite) {\r\n            pieces = this.blackPieces;\r\n        }\r\n        else {\r\n            pieces = this.whitePieces;\r\n        }\r\n        for (var i = 0; i < pieces.length; i++) {\r\n            moves = pieces[i].generateMoves(this);\r\n            for (var i_1 = 0; i_1 < moves.length; i_1++) {\r\n                moves[i_1].x;\r\n                if (king.matrixPosition.x == moves[i_1].x && king.matrixPosition.y == moves[i_1].y) {\r\n                    if (colorWhite) {\r\n                        this.whiteKingUnderAttack = true;\r\n                        return;\r\n                    }\r\n                    else {\r\n                        this.blackKingUnderAttack = true;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (colorWhite) {\r\n            this.whiteKingUnderAttack = false;\r\n        }\r\n        else {\r\n            this.blackKingUnderAttack = false;\r\n        }\r\n    };\r\n    return Board;\r\n}());\r\nexports.Board = Board;\r\n\n\n//# sourceURL=webpack:///./src/board.ts?");

/***/ }),

/***/ "./src/click.ts":
/*!**********************!*\
  !*** ./src/click.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result[\"default\"] = mod;\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar main_1 = __webpack_require__(/*! ./main */ \"./src/main.ts\");\r\nvar game_1 = __importStar(__webpack_require__(/*! ./game */ \"./src/game.ts\"));\r\nvar AI_1 = __webpack_require__(/*! ./AI */ \"./src/AI.ts\");\r\ndocument.getElementById(\"back\").onclick = function () { backButtonClick(); };\r\ndocument.getElementById(\"advance\").onclick = function () { advanceButtonClick(); };\r\nvar soundElement = document.getElementById(\"sound\");\r\nsoundElement.onclick = function () { soundButtonClick(); };\r\ndocument.getElementById(\"start\").onclick = function () { startButtonClick(); };\r\ndocument.getElementById(\"new-game\").onclick = function () { newGameButtonClick(); };\r\ndocument.getElementById(\"introduction\").onclick = function () { introductionButtonCLick(); };\r\nwindow.onkeydown = function (event) { enterClick(event); };\r\nexports.canvas = document.getElementById(\"my-canvas\");\r\nexports.canvas.onmousemove = function (event) { mouseMoved(event); };\r\nexports.canvas.onclick = function () { canvasClick(); };\r\nvar moving;\r\nvar AI;\r\nvar color;\r\nvar app;\r\nfunction enterClick(event) {\r\n    if (event.keyCode == 13) {\r\n        if (document.getElementById(\"canvas-overlay-container\").style.display != \"none\") {\r\n            startButtonClick();\r\n        }\r\n    }\r\n}\r\nfunction canvasClick() {\r\n    var x;\r\n    var y;\r\n    var piece;\r\n    var move;\r\n    x = Math.floor(exports.mouseX / game_1.tileSize);\r\n    y = Math.floor(exports.mouseY / game_1.tileSize);\r\n    if (!main_1.board.isDone()) {\r\n        if (!moving) {\r\n            exports.movingPiece = main_1.board.getPieceAt(x, y);\r\n            if (exports.movingPiece != null) {\r\n                // movingPiece = board.getPieceAt(x, y);\r\n                if ((exports.movingPiece.white && color == \"white\") || (!exports.movingPiece.white && color == \"black\")) {\r\n                    exports.movingPiece.movingThisPiece = true;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            if (exports.movingPiece.canMove(x, y, main_1.board)) {\r\n                piece = main_1.board.getPieceAt(x, y);\r\n                if (piece != null) {\r\n                    app.getGame().countPiecesDefeated(piece.kind, piece.white);\r\n                }\r\n                app.getGame().gameLog(exports.movingPiece, { x: x, y: y });\r\n                exports.movingPiece.move(x, y, main_1.board);\r\n                move = AI.decideMove();\r\n                app.getGame().gameLog(main_1.board.getPieceAt(move.from.x, move.from.y), move.to);\r\n                piece = main_1.board.getPieceAt(move.to.x, move.to.y);\r\n                if (piece != null) {\r\n                    app.getGame().countPiecesDefeated(piece.kind, piece.white);\r\n                }\r\n                AI.makeMove(move.from, move.to);\r\n                main_1.board.showScore();\r\n                main_1.board.kingUnderAttack(main_1.board.whitePieces[0]);\r\n                main_1.board.kingUnderAttack(main_1.board.blackPieces[0]);\r\n                if (main_1.board.blackKingUnderAttack || main_1.board.whiteKingUnderAttack) {\r\n                    console.log(\"Check\");\r\n                }\r\n            }\r\n            exports.movingPiece.movingThisPiece = false;\r\n        }\r\n        moving = !moving;\r\n        main_1.board.setScore();\r\n    }\r\n}\r\nfunction backButtonClick() {\r\n}\r\nfunction advanceButtonClick() {\r\n}\r\nfunction soundButtonClick() {\r\n    for (var i = 0; i < soundElement.classList.length; i++) {\r\n        if (soundElement.classList[i] == \"fa-volume-up\") {\r\n            soundElement.classList.remove(\"fa-volume-up\");\r\n            soundElement.classList.add(\"fa-volume-mute\");\r\n            break;\r\n        }\r\n        else if (soundElement.classList[i] == \"fa-volume-mute\") {\r\n            soundElement.classList.remove(\"fa-volume-mute\");\r\n            soundElement.classList.add(\"fa-volume-up\");\r\n            break;\r\n        }\r\n    }\r\n}\r\nfunction startButtonClick() {\r\n    app = new main_1.App(new game_1.default());\r\n    var el;\r\n    var ai;\r\n    var rEl;\r\n    var coc;\r\n    var name;\r\n    name = document.getElementById(\"username\").value;\r\n    if (name == \"\") {\r\n        document.getElementById(\"error-noname\").style.display = \"block\";\r\n        return;\r\n    }\r\n    else {\r\n        document.getElementById(\"error-noname\").style.display = \"none\";\r\n    }\r\n    coc = document.getElementById(\"canvas-overlay-container\");\r\n    coc.style.display = \"none\";\r\n    color = \"\";\r\n    el = document.getElementById(\"ai-selection\");\r\n    ai = el.options[el.selectedIndex].value;\r\n    rEl = document.getElementsByName(\"color\");\r\n    if (rEl[0].checked) {\r\n        color = rEl[0].value;\r\n    }\r\n    else {\r\n        color = rEl[1].value;\r\n    }\r\n    app.setup();\r\n    switch (ai) {\r\n        case \"Random\": {\r\n            AI = new AI_1.RandomAI(main_1.board, color == \"white\" ? false : true);\r\n            break;\r\n        }\r\n        case \"MiniMax\": {\r\n            AI = new AI_1.MinimaxAI(main_1.board, color == \"white\" ? false : true);\r\n            break;\r\n        }\r\n    }\r\n    console.log(\"Welcome \" + name + \" you 're playing against \" + ai + \" you have the \" + color + \" Pieces\");\r\n}\r\nfunction mouseMoved(event) {\r\n    getMousePos(event);\r\n}\r\nfunction getMousePos(event) {\r\n    var rect;\r\n    rect = exports.canvas.getBoundingClientRect();\r\n    exports.mouseX = event.clientX - rect.left;\r\n    exports.mouseY = event.clientY - rect.top;\r\n}\r\nfunction newGameButtonClick() {\r\n    var coc;\r\n    coc = document.getElementById(\"canvas-overlay-container\");\r\n    coc.style.display = \"initial\";\r\n}\r\nfunction introductionButtonCLick() {\r\n    document.getElementById(\"game-sitepanel\").style.display = \"none\";\r\n    document.getElementById(\"game-log\").style.display = \"none\";\r\n    document.getElementById(\"game-content\").style.display = \"none\";\r\n    document.getElementById(\"introcution-content\").style.display = \"block\";\r\n}\r\n\n\n//# sourceURL=webpack:///./src/click.ts?");

/***/ }),

/***/ "./src/game.ts":
/*!*********************!*\
  !*** ./src/game.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar click_1 = __webpack_require__(/*! ./click */ \"./src/click.ts\");\r\nvar main_1 = __webpack_require__(/*! ./main */ \"./src/main.ts\");\r\nvar Game = /** @class */ (function () {\r\n    function Game() {\r\n        this.ctx = click_1.canvas.getContext(\"2d\");\r\n        if (click_1.canvas.offsetHeight == click_1.canvas.offsetWidth) {\r\n            exports.tileSize = click_1.canvas.offsetHeight / 8;\r\n        }\r\n        else {\r\n            alert(\"Canvas is not a square\");\r\n        }\r\n    }\r\n    Game.prototype.render = function () {\r\n        console.log(\"Render\");\r\n        this.ctx.clearRect(0, 0, click_1.canvas.offsetWidth, click_1.canvas.offsetHeight);\r\n        this.showGrid();\r\n        this.showPieces();\r\n        // this.showPiecesAsText();\r\n        this.showMovesMovingPiece();\r\n    };\r\n    Game.prototype.showGrid = function () {\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = \"black\";\r\n        for (var i = 0; i < 8; i++) {\r\n            for (var ii = 0; ii < 8; ii++) {\r\n                if ((i + ii) % 2 == 0) {\r\n                    this.ctx.rect(i * exports.tileSize, ii * exports.tileSize, exports.tileSize, exports.tileSize);\r\n                }\r\n                else {\r\n                    this.ctx.fillRect(i * exports.tileSize, ii * exports.tileSize, exports.tileSize, exports.tileSize);\r\n                }\r\n            }\r\n        }\r\n        this.drawCoordinates();\r\n    };\r\n    Game.prototype.drawCoordinates = function () {\r\n        this.ctx.beginPath();\r\n        this.ctx.font = \"20px Arial\";\r\n        this.ctx.strokeStyle = \"white\";\r\n        this.ctx.fillStyle = \"black\";\r\n        for (var i = 0; i < 8; i++) {\r\n            if (i % 2 == 0) {\r\n                this.ctx.fillText(String(8 - i), 5, i * exports.tileSize + 20);\r\n                this.ctx.fillText(String.fromCharCode(64 + i), i * exports.tileSize - 20, exports.tileSize * 8 - 10);\r\n            }\r\n            else {\r\n                this.ctx.strokeText(String(8 - i), 5, i * exports.tileSize + 20);\r\n                this.ctx.strokeText(String.fromCharCode(64 + i), i * exports.tileSize - 20, exports.tileSize * 8 - 10);\r\n            }\r\n        }\r\n    };\r\n    Game.prototype.showMovesMovingPiece = function () {\r\n        var moves = [];\r\n        if (click_1.movingPiece == undefined || click_1.movingPiece.movingThisPiece == false) {\r\n            return;\r\n        }\r\n        moves = click_1.movingPiece.generateMoves(main_1.board);\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = \"green\";\r\n        for (var i = 0; i < moves.length; i++) {\r\n            this.ctx.moveTo(moves[i].x * exports.tileSize + exports.tileSize / 2, moves[i].y * exports.tileSize + exports.tileSize / 2);\r\n            this.ctx.arc(moves[i].x * exports.tileSize + exports.tileSize / 2, moves[i].y * exports.tileSize + exports.tileSize / 2, 15, 0, 2 * Math.PI);\r\n        }\r\n        this.ctx.fill();\r\n    };\r\n    Game.prototype.gameLog = function (piece, to) {\r\n        var logTextEl;\r\n        logTextEl = document.getElementById(\"game-log-text\");\r\n        logTextEl.value = piece.letter + String.fromCharCode(piece.matrixPosition.x + 65) + (8 - piece.matrixPosition.y) + \"-\" + String.fromCharCode(to.x + 65) + (8 - to.y) + \"\\n\" + logTextEl.value;\r\n    };\r\n    Game.prototype.showPieces = function () {\r\n        var imagePos;\r\n        imagePos = 0;\r\n        for (var i = 0; i < main_1.board.whitePieces.length; i++) {\r\n            if (main_1.board.whitePieces[i].taken) {\r\n                continue;\r\n            }\r\n            switch (main_1.board.whitePieces[i].kind) {\r\n                case \"Pawn\": {\r\n                    imagePos = 5;\r\n                    break;\r\n                }\r\n                case \"Knigth\": {\r\n                    imagePos = 3;\r\n                    break;\r\n                }\r\n                case \"Bishop\": {\r\n                    imagePos = 2;\r\n                    break;\r\n                }\r\n                case \"Rook\": {\r\n                    imagePos = 4;\r\n                    break;\r\n                }\r\n                case \"Queen\": {\r\n                    imagePos = 1;\r\n                    break;\r\n                }\r\n                case \"King\": {\r\n                    imagePos = 0;\r\n                    break;\r\n                }\r\n            }\r\n            if (main_1.board.whitePieces[i].movingThisPiece) {\r\n                this.ctx.drawImage(main_1.images[imagePos], click_1.mouseX - exports.tileSize / 2, click_1.mouseY - exports.tileSize / 2, exports.tileSize + exports.tileSize * 0.2, exports.tileSize + exports.tileSize * 0.2);\r\n            }\r\n            else {\r\n                this.ctx.drawImage(main_1.images[imagePos], main_1.board.whitePieces[i].pixelPositon.x, main_1.board.whitePieces[i].pixelPositon.y, exports.tileSize, exports.tileSize);\r\n            }\r\n        }\r\n        for (var i = 0; i < main_1.board.blackPieces.length; i++) {\r\n            if (main_1.board.blackPieces[i].taken) {\r\n                continue;\r\n            }\r\n            switch (main_1.board.blackPieces[i].kind) {\r\n                case \"Pawn\": {\r\n                    imagePos = 11;\r\n                    break;\r\n                }\r\n                case \"Knigth\": {\r\n                    imagePos = 9;\r\n                    break;\r\n                }\r\n                case \"Bishop\": {\r\n                    imagePos = 8;\r\n                    break;\r\n                }\r\n                case \"Rook\": {\r\n                    imagePos = 10;\r\n                    break;\r\n                }\r\n                case \"Queen\": {\r\n                    imagePos = 7;\r\n                    break;\r\n                }\r\n                case \"King\": {\r\n                    imagePos = 6;\r\n                    break;\r\n                }\r\n            }\r\n            if (main_1.board.blackPieces[i].movingThisPiece) {\r\n                this.ctx.drawImage(main_1.images[imagePos], click_1.mouseX - exports.tileSize / 2, click_1.mouseY - exports.tileSize / 2, exports.tileSize + exports.tileSize * 0.2, exports.tileSize + exports.tileSize * 0.2);\r\n            }\r\n            else {\r\n                this.ctx.drawImage(main_1.images[imagePos], main_1.board.blackPieces[i].pixelPositon.x, main_1.board.blackPieces[i].pixelPositon.y, exports.tileSize, exports.tileSize);\r\n            }\r\n        }\r\n    };\r\n    Game.prototype.countPiecesDefeated = function (type, white) {\r\n        var value;\r\n        switch (type) {\r\n            case \"Pawn\": {\r\n                if (white) {\r\n                    value = Number(document.getElementById(\"pawn-score-white\").innerText);\r\n                    value++;\r\n                    document.getElementById(\"pawn-score-white\").innerText = String(value);\r\n                }\r\n                else {\r\n                    value = Number(document.getElementById(\"pawn-score-black\").innerText);\r\n                    value++;\r\n                    document.getElementById(\"pawn-score-black\").innerText = String(value);\r\n                }\r\n                break;\r\n            }\r\n            case \"Bishop\": {\r\n                if (white) {\r\n                    value = Number(document.getElementById(\"bishop-score-white\").innerText);\r\n                    value++;\r\n                    document.getElementById(\"bishop-score-white\").innerText = String(value);\r\n                }\r\n                else {\r\n                    value = Number(document.getElementById(\"bishop-score-black\").innerText);\r\n                    value++;\r\n                    document.getElementById(\"bishop-score-black\").innerText = String(value);\r\n                }\r\n                break;\r\n            }\r\n            case \"Knigth\": {\r\n                if (white) {\r\n                    value = Number(document.getElementById(\"knigth-score-white\").innerText);\r\n                    value++;\r\n                    document.getElementById(\"knigth-score-white\").innerText = String(value);\r\n                }\r\n                else {\r\n                    value = Number(document.getElementById(\"knigth-score-black\").innerText);\r\n                    value++;\r\n                    document.getElementById(\"knigth-score-black\").innerText = String(value);\r\n                }\r\n                break;\r\n            }\r\n            case \"Rook\": {\r\n                if (white) {\r\n                    value = Number(document.getElementById(\"rook-score-white\").innerText);\r\n                    value++;\r\n                    document.getElementById(\"rook-score-white\").innerText = String(value);\r\n                }\r\n                else {\r\n                    value = Number(document.getElementById(\"rook-score-black\").innerText);\r\n                    value++;\r\n                    document.getElementById(\"rook-score-black\").innerText = String(value);\r\n                }\r\n                break;\r\n            }\r\n            case \"Queen\": {\r\n                if (white) {\r\n                    value = Number(document.getElementById(\"queen-score-white\").innerText);\r\n                    value++;\r\n                    document.getElementById(\"queen-score-white\").innerText = String(value);\r\n                }\r\n                else {\r\n                    value = Number(document.getElementById(\"queen-score-black\").innerText);\r\n                    value++;\r\n                    document.getElementById(\"queen-score-black\").innerText = String(value);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    return Game;\r\n}());\r\nexports.default = Game;\r\n\n\n//# sourceURL=webpack:///./src/game.ts?");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar board_1 = __webpack_require__(/*! ./board */ \"./src/board.ts\");\r\nexports.images = [];\r\nvar App = /** @class */ (function () {\r\n    function App(game) {\r\n        this._game = game;\r\n    }\r\n    App.prototype.setup = function () {\r\n        for (var i = 1; i < 10; i++) {\r\n            exports.images.push(loadImage(\"assets/2000px-Chess_Pieces_Sprite_0\" + i + \".png\"));\r\n        }\r\n        for (var i = 10; i < 13; i++) {\r\n            exports.images.push(loadImage(\"assets/2000px-Chess_Pieces_Sprite_\" + i + \".png\"));\r\n        }\r\n        exports.board = new board_1.Board();\r\n        this.gameLoop();\r\n    };\r\n    App.prototype.gameLoop = function () {\r\n        requestAnimationFrame(this.gameLoop.bind(this));\r\n        this._game.render();\r\n    };\r\n    App.prototype.getGame = function () {\r\n        return this._game;\r\n    };\r\n    return App;\r\n}());\r\nexports.App = App;\r\nfunction loadImage(src) {\r\n    var image;\r\n    image = new Image();\r\n    image.src = src;\r\n    return image;\r\n}\r\nfunction createVector(x, y) {\r\n    return { x: x, y: y };\r\n}\r\nexports.createVector = createVector;\r\n\n\n//# sourceURL=webpack:///./src/main.ts?");

/***/ }),

/***/ "./src/piece.ts":
/*!**********************!*\
  !*** ./src/piece.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar main_1 = __webpack_require__(/*! ./main */ \"./src/main.ts\");\r\nvar game_1 = __webpack_require__(/*! ./game */ \"./src/game.ts\");\r\nvar Piece = /** @class */ (function () {\r\n    function Piece(x, y, isWhite, letter) {\r\n        this.matrixPosition = main_1.createVector(x, y);\r\n        // pixelPositon for Text\r\n        // this.pixelPositon = createVector(x * tileSize + tileSize / 2, y * tileSize + tileSize / 2 + 10);\r\n        // pixelPositon for Images\r\n        this.pixelPositon = main_1.createVector(x * game_1.tileSize, y * game_1.tileSize);\r\n        this.taken = false;\r\n        this.white = isWhite;\r\n        this.letter = letter;\r\n        this.movingThisPiece = false;\r\n        this.value = 0;\r\n        this.kind = \"\";\r\n    }\r\n    Piece.prototype.move = function (x, y, board) {\r\n        var attacking;\r\n        attacking = board.getPieceAt(x, y);\r\n        if (attacking != null) {\r\n            if (attacking != null) {\r\n                attacking.taken = true;\r\n            }\r\n        }\r\n        // console.log(\"Move \"+this.kind+\" from \"+x+\" to \"+y);\r\n        this.matrixPosition = main_1.createVector(x, y);\r\n        this.pixelPositon = main_1.createVector(x * game_1.tileSize, y * game_1.tileSize);\r\n    };\r\n    Piece.prototype.withinBounds = function (x, y) {\r\n        if (x >= 0 && y >= 0 && x < 8 && y < 8) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Piece.prototype.attackingAllies = function (x, y, board) {\r\n        var attacking;\r\n        attacking = board.getPieceAt(x, y);\r\n        if (attacking != null) {\r\n            if (attacking.white == this.white) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Piece.prototype.moveTroughPieces = function (x, y, board) {\r\n        var stepDirectionX = x - this.matrixPosition.x;\r\n        if (stepDirectionX > 0) {\r\n            stepDirectionX = 1;\r\n        }\r\n        else if (stepDirectionX < 0) {\r\n            stepDirectionX = -1;\r\n        }\r\n        var stepDirectionY = y - this.matrixPosition.y;\r\n        if (stepDirectionY > 0) {\r\n            stepDirectionY = 1;\r\n        }\r\n        else if (stepDirectionY < 0) {\r\n            stepDirectionY = -1;\r\n        }\r\n        var tempPos = main_1.createVector(this.matrixPosition.x, this.matrixPosition.y);\r\n        tempPos.x += stepDirectionX;\r\n        tempPos.y += stepDirectionY;\r\n        while (tempPos.x != x || tempPos.y != y) {\r\n            if (!this.withinBounds(tempPos.x, tempPos.y)) {\r\n                return false;\r\n            }\r\n            if (board.getPieceAt(tempPos.x, tempPos.y) != null) {\r\n                return true;\r\n            }\r\n            tempPos.x += stepDirectionX;\r\n            tempPos.y += stepDirectionY;\r\n        }\r\n        return false;\r\n    };\r\n    Piece.prototype.setNewLocation = function (x, y) {\r\n        this.matrixPosition = main_1.createVector(x, y);\r\n        this.pixelPositon = main_1.createVector(x * game_1.tileSize, y * game_1.tileSize);\r\n    };\r\n    Piece.prototype.kingIsSave = function (x, y, board) {\r\n        var future;\r\n        future = board.clone();\r\n        future.movePiece(this.matrixPosition, { x: x, y: y });\r\n        if (this.white) {\r\n            future.kingUnderAttack(future.whitePieces[0]);\r\n            return future.whiteKingUnderAttack;\r\n        }\r\n        else {\r\n            future.kingUnderAttack(future.blackPieces[0]);\r\n            return future.blackKingUnderAttack;\r\n        }\r\n    };\r\n    return Piece;\r\n}());\r\nexports.Piece = Piece;\r\nvar King = /** @class */ (function (_super) {\r\n    __extends(King, _super);\r\n    function King(x, y, isWhite) {\r\n        var _this = _super.call(this, x, y, isWhite, \"K\") || this;\r\n        _this.firstTurn = true;\r\n        _this.gotAttacked = false;\r\n        // if (isWhite) {\r\n        //     this.pic = King.images[0];\r\n        // } else {\r\n        //     this.pic = King.images[6];\r\n        // }\r\n        _this.value = 99;\r\n        _this.kind = \"King\";\r\n        return _this;\r\n    }\r\n    King.prototype.canMove = function (x, y, board) {\r\n        if (!this.withinBounds(x, y)) {\r\n            return false;\r\n        }\r\n        if (this.attackingAllies(x, y, board)) {\r\n            return false;\r\n        }\r\n        if (this.moveTroughPieces(x, y, board)) {\r\n            return false;\r\n        }\r\n        if (Math.abs(x - this.matrixPosition.x) <= 1 && Math.abs(y - this.matrixPosition.y) <= 1) {\r\n            this.firstTurn = false;\r\n            return true;\r\n        }\r\n        if (this.firstTurn && !this.gotAttacked && Math.abs(x - this.matrixPosition.x) == 2 && Math.abs(y - this.matrixPosition.y) == 0) {\r\n            return this.rochade(x, this.white, board);\r\n        }\r\n        if (this.firstTurn && !this.gotAttacked && Math.abs(x - this.matrixPosition.x) == -2 && Math.abs(y - this.matrixPosition.y) == 0) {\r\n            return this.rochade(x, this.white, board);\r\n        }\r\n        return false;\r\n    };\r\n    King.prototype.generateMoves = function (board) {\r\n        var moves = [];\r\n        for (var i = -1; i < 2; i++) {\r\n            for (var j = -1; j < 2; j++) {\r\n                var x = this.matrixPosition.x + i;\r\n                var y = this.matrixPosition.y + j;\r\n                if (this.withinBounds(x, y)) {\r\n                    if (!this.attackingAllies(x, y, board)) {\r\n                        moves.push(main_1.createVector(x, y));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return moves;\r\n    };\r\n    King.prototype.clone = function () {\r\n        var cloneKing = new King(this.matrixPosition.x, this.matrixPosition.y, this.white);\r\n        cloneKing.taken = this.taken;\r\n        return cloneKing;\r\n    };\r\n    King.prototype.rochade = function (kingX, white, board) {\r\n        if (white) {\r\n            for (var i = 0; i < board.whitePieces.length; i++) {\r\n                if (board.whitePieces[i] instanceof Rook) {\r\n                    if (Math.abs(kingX - board.whitePieces[i].matrixPosition.x) <= 2) {\r\n                        if (board.whitePieces[i].firstTurn) {\r\n                            if (kingX > this.matrixPosition.x) {\r\n                                board.whitePieces[i].setNewLocation(this.matrixPosition.x + 1, this.matrixPosition.y);\r\n                            }\r\n                            else {\r\n                                board.whitePieces[i].setNewLocation(this.matrixPosition.x - 1, this.matrixPosition.y);\r\n                            }\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < board.blackPieces.length; i++) {\r\n                if (board.blackPieces[i] instanceof Rook) {\r\n                    if (Math.abs(kingX - board.blackPieces[i].matrixPosition.x) <= 2) {\r\n                        if (board.blackPieces[i].firstTurn) {\r\n                            if (kingX > this.matrixPosition.x) {\r\n                                board.blackPieces[i].setNewLocation(this.matrixPosition.x + 1, this.matrixPosition.y);\r\n                            }\r\n                            else {\r\n                                board.blackPieces[i].setNewLocation(this.matrixPosition.x - 1, this.matrixPosition.y);\r\n                            }\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    return King;\r\n}(Piece));\r\nexports.King = King;\r\nvar Queen = /** @class */ (function (_super) {\r\n    __extends(Queen, _super);\r\n    function Queen(x, y, isWhite) {\r\n        var _this = _super.call(this, x, y, isWhite, \"Q\") || this;\r\n        // if (isWhite) {\r\n        //     this.pic = Queen.images[1];\r\n        // } else {\r\n        //     this.pic = Queen.images[7];\r\n        // }\r\n        _this.value = 9;\r\n        _this.kind = \"Queen\";\r\n        return _this;\r\n    }\r\n    Queen.prototype.canMove = function (x, y, board) {\r\n        if (!this.withinBounds(x, y)) {\r\n            return false;\r\n        }\r\n        if (this.attackingAllies(x, y, board)) {\r\n            return false;\r\n        }\r\n        if (x == this.matrixPosition.x || y == this.matrixPosition.y) {\r\n            if (this.moveTroughPieces(x, y, board)) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        if (Math.abs(x - this.matrixPosition.x) == Math.abs(y - this.matrixPosition.y)) {\r\n            if (this.moveTroughPieces(x, y, board)) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Queen.prototype.generateMoves = function (board) {\r\n        var moves = [];\r\n        if (this.taken) {\r\n            return [];\r\n        }\r\n        // Horizontal\r\n        for (var i = 0; i < 8; i++) {\r\n            var x = i;\r\n            var y = this.matrixPosition.y;\r\n            if (x != this.matrixPosition.x) {\r\n                if (!this.attackingAllies(x, y, board)) {\r\n                    if (!this.moveTroughPieces(x, y, board)) {\r\n                        moves.push(main_1.createVector(x, y));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Vertikal\r\n        for (var i = 0; i < 8; i++) {\r\n            x = this.matrixPosition.x;\r\n            y = i;\r\n            if (y != this.matrixPosition.y) {\r\n                if (!this.attackingAllies(x, y, board)) {\r\n                    if (!this.moveTroughPieces(x, y, board)) {\r\n                        moves.push(main_1.createVector(x, y));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Diagonal\r\n        // Right to Left\r\n        for (var i = 7; i >= 0; i--) {\r\n            x = i;\r\n            y = this.matrixPosition.y + this.matrixPosition.x - i;\r\n            if (i != this.matrixPosition.x) {\r\n                if (this.withinBounds(x, y)) {\r\n                    if (!this.attackingAllies(x, y, board)) {\r\n                        if (!this.moveTroughPieces(x, y, board)) {\r\n                            moves.push(main_1.createVector(x, y));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Left to Right\r\n        for (var i = 0; i < 8; i++) {\r\n            x = this.matrixPosition.x - (this.matrixPosition.y - i);\r\n            y = i;\r\n            if (i != this.matrixPosition.y) {\r\n                if (this.withinBounds(x, y)) {\r\n                    if (!this.attackingAllies(x, y, board)) {\r\n                        if (!this.moveTroughPieces(x, y, board)) {\r\n                            moves.push(main_1.createVector(x, y));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return moves;\r\n    };\r\n    Queen.prototype.clone = function () {\r\n        var cloneQueen = new Queen(this.matrixPosition.x, this.matrixPosition.y, this.white);\r\n        cloneQueen.taken = this.taken;\r\n        return cloneQueen;\r\n    };\r\n    return Queen;\r\n}(Piece));\r\nexports.Queen = Queen;\r\nvar Rook = /** @class */ (function (_super) {\r\n    __extends(Rook, _super);\r\n    function Rook(x, y, isWhite) {\r\n        var _this = _super.call(this, x, y, isWhite, \"R\") || this;\r\n        _this.firstTurn = true;\r\n        // if (isWhite) {\r\n        //     this.pic = Rook.images[4];\r\n        // } else {\r\n        //     this.pic = Rook.images[10];\r\n        // }\r\n        _this.value = 5;\r\n        _this.kind = \"Rook\";\r\n        return _this;\r\n    }\r\n    Rook.prototype.canMove = function (x, y, board) {\r\n        if (!this.withinBounds(x, y)) {\r\n            return false;\r\n        }\r\n        if (this.attackingAllies(x, y, board)) {\r\n            return false;\r\n        }\r\n        if (x == this.matrixPosition.x || y == this.matrixPosition.y) {\r\n            if (this.moveTroughPieces(x, y, board)) {\r\n                return false;\r\n            }\r\n            this.firstTurn = false;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Rook.prototype.generateMoves = function (board) {\r\n        var moves = [];\r\n        if (this.taken) {\r\n            return [];\r\n        }\r\n        for (var i = 0; i < 8; i++) {\r\n            var x = i;\r\n            var y = this.matrixPosition.y;\r\n            if (i != this.matrixPosition.x) {\r\n                if (!this.attackingAllies(x, y, board)) {\r\n                    if (!this.moveTroughPieces(x, y, board)) {\r\n                        moves.push(main_1.createVector(x, y));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (var i = 0; i < 8; i++) {\r\n            x = this.matrixPosition.x;\r\n            y = i;\r\n            if (i != this.matrixPosition.y) {\r\n                if (!this.attackingAllies(x, y, board)) {\r\n                    if (!this.moveTroughPieces(x, y, board)) {\r\n                        moves.push(main_1.createVector(x, y));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return moves;\r\n    };\r\n    Rook.prototype.clone = function () {\r\n        var cloneRook = new Rook(this.matrixPosition.x, this.matrixPosition.y, this.white);\r\n        cloneRook.taken = this.taken;\r\n        return cloneRook;\r\n    };\r\n    return Rook;\r\n}(Piece));\r\nexports.Rook = Rook;\r\nvar Bishop = /** @class */ (function (_super) {\r\n    __extends(Bishop, _super);\r\n    function Bishop(x, y, isWhite) {\r\n        var _this = _super.call(this, x, y, isWhite, \"B\") || this;\r\n        // if (isWhite) {\r\n        //     this.pic = Bishop.images[2];\r\n        // } else {\r\n        //     this.pic = Bishop.images[8];\r\n        // }\r\n        _this.value = 3;\r\n        _this.kind = \"Bishop\";\r\n        return _this;\r\n    }\r\n    Bishop.prototype.canMove = function (x, y, board) {\r\n        if (!this.withinBounds(x, y)) {\r\n            return false;\r\n        }\r\n        if (this.attackingAllies(x, y, board)) {\r\n            return false;\r\n        }\r\n        if (Math.abs(x - this.matrixPosition.x) == Math.abs(y - this.matrixPosition.y)) {\r\n            if (this.moveTroughPieces(x, y, board)) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Bishop.prototype.generateMoves = function (board) {\r\n        var moves = [];\r\n        if (this.taken) {\r\n            return [];\r\n        }\r\n        for (var i = 7; i >= 0; i--) {\r\n            var x = i;\r\n            var y = this.matrixPosition.y + this.matrixPosition.x - i;\r\n            if (i != this.matrixPosition.x) {\r\n                if (this.withinBounds(x, y)) {\r\n                    if (!this.attackingAllies(x, y, board)) {\r\n                        if (!this.moveTroughPieces(x, y, board)) {\r\n                            moves.push(main_1.createVector(x, y));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (var i = 0; i < 8; i++) {\r\n            var x = this.matrixPosition.x - (this.matrixPosition.y - i);\r\n            var y = i;\r\n            if (i != this.matrixPosition.y) {\r\n                if (this.withinBounds(x, y)) {\r\n                    if (!this.attackingAllies(x, y, board)) {\r\n                        if (!this.moveTroughPieces(x, y, board)) {\r\n                            moves.push(main_1.createVector(x, y));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return moves;\r\n    };\r\n    Bishop.prototype.clone = function () {\r\n        var cloneBishop = new Bishop(this.matrixPosition.x, this.matrixPosition.y, this.white);\r\n        cloneBishop.taken = this.taken;\r\n        return cloneBishop;\r\n    };\r\n    return Bishop;\r\n}(Piece));\r\nexports.Bishop = Bishop;\r\nvar Knigth = /** @class */ (function (_super) {\r\n    __extends(Knigth, _super);\r\n    function Knigth(x, y, isWhite) {\r\n        var _this = _super.call(this, x, y, isWhite, \"N\") || this;\r\n        // if (isWhite) {\r\n        //     this.pic = Knigth.images[3];\r\n        // } else {\r\n        //     this.pic = Knigth.images[9];\r\n        // }\r\n        _this.value = 3;\r\n        _this.kind = \"Knigth\";\r\n        return _this;\r\n    }\r\n    Knigth.prototype.canMove = function (x, y, board) {\r\n        if (!this.withinBounds(x, y)) {\r\n            return false;\r\n        }\r\n        if (this.attackingAllies(x, y, board)) {\r\n            return false;\r\n        }\r\n        if (Math.abs(x - this.matrixPosition.x) == 1 && Math.abs(y - this.matrixPosition.y) == 2 ||\r\n            Math.abs(x - this.matrixPosition.x) == 2 && Math.abs(y - this.matrixPosition.y) == 1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Knigth.prototype.generateMoves = function (board) {\r\n        var moves = [];\r\n        if (this.taken) {\r\n            return [];\r\n        }\r\n        for (var i = -2; i < 3; i += 4) {\r\n            for (var j = -1; j < 2; j += 2) {\r\n                var x = this.matrixPosition.x + i;\r\n                var y = this.matrixPosition.y + j;\r\n                if (this.withinBounds(x, y)) {\r\n                    if (!this.attackingAllies(x, y, board)) {\r\n                        moves.push(main_1.createVector(x, y));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (var i = -1; i < 2; i += 2) {\r\n            for (var j = -2; j < 3; j += 4) {\r\n                var x = this.matrixPosition.x + i;\r\n                var y = this.matrixPosition.y + j;\r\n                if (this.withinBounds(x, y)) {\r\n                    if (!this.attackingAllies(x, y, board)) {\r\n                        moves.push(main_1.createVector(x, y));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return moves;\r\n    };\r\n    Knigth.prototype.clone = function () {\r\n        var cloneKnight = new Knigth(this.matrixPosition.x, this.matrixPosition.y, this.white);\r\n        cloneKnight.taken = this.taken;\r\n        return cloneKnight;\r\n    };\r\n    return Knigth;\r\n}(Piece));\r\nexports.Knigth = Knigth;\r\nvar Pawn = /** @class */ (function (_super) {\r\n    __extends(Pawn, _super);\r\n    function Pawn(x, y, isWhite) {\r\n        var _this = _super.call(this, x, y, isWhite, \"P\") || this;\r\n        _this.firstTurn = true;\r\n        // if (isWhite) {\r\n        //     this.pic = Pawn.images[5];\r\n        // } else {\r\n        //     this.pic = Pawn.images[11];\r\n        // }\r\n        _this.value = 1;\r\n        _this.kind = \"Pawn\";\r\n        return _this;\r\n    }\r\n    Pawn.prototype.canMove = function (x, y, board) {\r\n        if (!this.withinBounds(x, y)) {\r\n            return false;\r\n        }\r\n        if (this.attackingAllies(x, y, board)) {\r\n            return false;\r\n        }\r\n        if (board.getPieceAt(x, y) != null) {\r\n            if (Math.abs(x - this.matrixPosition.x) == Math.abs(y - this.matrixPosition.y) &&\r\n                ((this.white && (y - this.matrixPosition.y) == -1) || (!this.white && (y - this.matrixPosition.y) == 1))) {\r\n                this.firstTurn = false;\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        if (x - this.matrixPosition.x != 0) {\r\n            return false;\r\n        }\r\n        if (this.white) {\r\n            if (y - this.matrixPosition.y == -1) {\r\n                return true;\r\n            }\r\n            if (this.firstTurn && y - this.matrixPosition.y == -2) {\r\n                if (this.moveTroughPieces(x, y, board)) {\r\n                    return false;\r\n                }\r\n                this.firstTurn = false;\r\n                return true;\r\n            }\r\n        }\r\n        if (!this.white) {\r\n            if (y - this.matrixPosition.y == 1) {\r\n                return true;\r\n            }\r\n            if (this.firstTurn && y - this.matrixPosition.y == 2) {\r\n                if (this.moveTroughPieces(x, y, board)) {\r\n                    return false;\r\n                }\r\n                this.firstTurn = false;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Pawn.prototype.generateMoves = function (board) {\r\n        var moves = [];\r\n        var x;\r\n        var y;\r\n        var piece;\r\n        if (this.taken) {\r\n            return [];\r\n        }\r\n        if ((this.white && !board.whiteKingUnderAttack) || (!this.white && !board.blackKingUnderAttack)) {\r\n            for (var i = -1; i < 2; i += 2) {\r\n                x = this.matrixPosition.x + i;\r\n                if (this.white) {\r\n                    y = this.matrixPosition.y - 1;\r\n                }\r\n                else {\r\n                    y = this.matrixPosition.y + 1;\r\n                }\r\n                piece = board.getPieceAt(x, y);\r\n                if (piece != null) {\r\n                    if (this.white != piece.white) {\r\n                        moves.push(main_1.createVector(x, y));\r\n                    }\r\n                }\r\n            }\r\n            x = this.matrixPosition.x;\r\n            if (this.white) {\r\n                y = this.matrixPosition.y - 1;\r\n            }\r\n            else {\r\n                y = this.matrixPosition.y + 1;\r\n            }\r\n            if (this.withinBounds(x, y) && !board.getPieceAt(x, y)) {\r\n                moves.push(main_1.createVector(x, y));\r\n            }\r\n            if (this.firstTurn) {\r\n                x = this.matrixPosition.x;\r\n                if (this.white) {\r\n                    y = this.matrixPosition.y - 2;\r\n                }\r\n                else {\r\n                    y = this.matrixPosition.y + 2;\r\n                }\r\n                if (this.withinBounds(x, y) && !board.getPieceAt(x, y)) {\r\n                    if (!this.moveTroughPieces(x, y, board)) {\r\n                        moves.push(main_1.createVector(x, y));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n        }\r\n        return moves;\r\n    };\r\n    Pawn.prototype.clone = function () {\r\n        var clonePawn = new Pawn(this.matrixPosition.x, this.matrixPosition.y, this.white);\r\n        clonePawn.taken = this.taken;\r\n        clonePawn.firstTurn = this.firstTurn;\r\n        return clonePawn;\r\n    };\r\n    return Pawn;\r\n}(Piece));\r\nexports.Pawn = Pawn;\r\n\n\n//# sourceURL=webpack:///./src/piece.ts?");

/***/ })

/******/ });